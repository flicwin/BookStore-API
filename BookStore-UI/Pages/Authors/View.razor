@page "/authors/view/{Id}"
@inject IAuthorRepository _repo
@inject NavigationManager _navManager
@*@inject IToastService _toastService*@

<h3 class="card-title">View Author Details</h3>
<hr />
<br />
@if (int.Parse(Id) < 1 || string.IsNullOrWhiteSpace(Id))
{
    <ErrorMessage Message="Invalid Selection. Please Try Again" /> 
}
else if (Model == null)
{
    <LoadingMessage Message="Loading Author Details" /> 
}
else
{
//_toastService.ShowInfo($"Now Viewing {Model.FirstName} {Model.LastName}", "");
<div class="col-md-8">
    <table class="table table-responsive">
        <tr>
            <td>First Name</td>
            <td>@Model.FirstName</td>
        </tr>
        <tr>
            <td>Last Name</td>
            <td>@Model.LastName</td>
        </tr>
        <tr>
            <td>Biography</td>
            <td>@Model.Bio</td>
        </tr>
    </table>
    <br />
    @if (Model.Books == null || Model.Books.Count < 1)
    {
<div class="alert alert-dismissible alert-secondary">
    No Books for this Author
</div> }
else
{
    <div class="card w-100" style="width: 100%;">
        <div class="card-header">
            <h4>Author's Books</h4>
        </div>
        <ul class="list-group list-group-flush">
            @foreach (var book in Model.Books)
            {
            <li class="list-group-item">@book.Title - @book.Price </li>
            }
        </ul>
    </div>
}

</div>}
<br />

<AuthorizeView Roles="Administrator">
    <button @onclick="GoToEdit" class="btn btn-outline-warning">
        <span class="oi oi-pencil"></span>
        Edit Author
    </button>
    <button @onclick="GoToDelete" class="btn btn-outline-danger">
        <span class="oi oi-circle-x"></span>
        Delete Author
    </button>
</AuthorizeView>
<button @onclick="BackToList" class="btn btn-outline-secondary">
    <span class="oi oi-media-skip-backward"></span>
    Back To List
</button>

@code { [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();

    protected override async Task OnInitializedAsync()
    {
        int id = Convert.ToInt32(Id);
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, id);
    }

    private void BackToList()
    {
        _navManager.NavigateTo("/authors/");
    }

    private void GoToEdit()
    {
        _navManager.NavigateTo($"/authors/edit/{Model.Id}");
    }

    private void GoToDelete()
    {
        _navManager.NavigateTo($"/authors/delete/{Model.Id}");
    } }
