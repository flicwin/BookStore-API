@page "/Register"

@using BookStore_UI.Models
@using BookStore_UI.Contracts

@inject IAuthenticationRepository _authRepo
@inject NavigationManager _navMan

<h3 class="card-title align-self-md-center">Register</h3>
<hr />
@if (!response)
{
    <div class="alert alert-danger">
        <p>Something went wrong with your registration attempt.</p>
    </div>
}
<div class="card-body">
    <EditForm Model="Model" OnValidSubmit="HandleRegistration">
        <DataAnnotationsValidator />
        <div class="form-group">
            <label class="col-form-label-sm" for="email">Email address</label>
            <InputText Id="email" class="form-control" aria-describedby="emailHelp" @bind-Value="Model.EmailAddress" placeholder="you@yourdomain" />
            <small id="emailHelp" class="form-text text-muted">We'll never share your email with anyone else.</small>
            @*<ValidationMessage For="@(() => Model.EmailAddress)"/>*@
        </div>
        <div class="form-group">
            <label class="col-form-label-sm" for="password">Password</label>
            <InputText type="password" Id="password" class="form-control" aria-describedby="passwordHelp" @bind-Value="Model.Password" />
            <small id="passwordHelp" class="form-text text-muted">*Required. Must be between 8 and 26 characters and contain one number, one uppercase letter and one special character.</small>
            @*<ValidationMessage For="@(()=>Model.Password)"/>*@
        </div>
        <div class="form-group">
            <label class="col-form-label-sm" for="confirmpassword">Confirm Password</label>
            <InputText type="password" Id="confirmpassword" class="form-control" @bind-Value="Model.ConfirmPassword" />
            @*<ValidationMessage For="@(()=>Model.ConfirmPassword)"/>*@
        </div>
        <hr />
        <ValidationSummary />
        <button type="submit" class="btn btn-outline-primary btn-block">Register</button>
    </EditForm>
</div>

@code {
    private RegistrationModel Model = new RegistrationModel();
    bool response = true;

    private async Task HandleRegistration()
    {
        var response = await _authRepo.Register(Model);
        if (response)
        {
            _navMan.NavigateTo("/Login");
        }
    }
}
